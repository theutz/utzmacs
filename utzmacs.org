#+TITLE: Utzmacs
#+AUTHOR: Michael Utz
#+EMAIL: michael@theutz.com

* Configure Emacs

** Definitions

*** Constants

    #+BEGIN_SRC emacs-lisp
      (defconst utz/leader-key "SPC"
	"Like VIM's leader.")
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defconst utz/localleader-key ","
	"Like VIM's localleader.")
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defconst utz/default-definer-keymaps '(normal insert visual emacs)
	"The default evil modes used in my custom definer")
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defconst utz/init-file
	(expand-file-name "init.el" user-emacs-directory)
	"File where Utzmacs is bootstrapped.")
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defconst utz/config-file
	(expand-file-name "utzmacs.org" user-emacs-directory)
	"This file.")
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defconst utz/custom-file
	(expand-file-name "custom.el" user-emacs-directory)
	"Where to store customizations.")
    #+END_SRC

*** Functions

    #+BEGIN_SRC emacs-lisp
      (defun utz/reload-configuration ()
	"Reload the configuration file."
	(interactive)
	(load user-init-file nil 'nomessage))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun utz/view-init-file ()
	"View the init file."
	(interactive)
	(find-file utz/init-file))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun utz/view-configuration ()
	"View this configuration file."
	(interactive)
	(find-file utz/config-file))
    #+END_SRC

** Configuration

*** Custom File

    #+BEGIN_SRC emacs-lisp
      (setq custom-file utz/custom-file)
      (load custom-file)
    #+END_SRC

* Install & Configure Packages

** Setup

*** Use Package

    #+BEGIN_SRC emacs-lisp
      (straight-use-package 'use-package)
      (require 'use-package)
    #+END_SRC

** Install & Configure

*** General

    #+BEGIN_SRC emacs-lisp
      (use-package general
	:straight t
	:init
	:config
	(general-auto-unbind-keys)
	;; Setup Definer for Leader Key
	(general-create-definer utz/set-leader-key
	  :prefix utz/leader-key
	  :non-normal-prefix (concat "M-" utz/leader-key)
	  :keymaps utz/default-definer-keymaps)

	;; Setup Definer for Local Leader Key
	(general-create-definer utz/set-localleader-key
	  :prefix utz/localleader-key
	  :non-normal-prefix (concat "M-" utz/localleader-key))

	;; Define Generic Top-Level Leader Keys
	(utz/set-leader-key
	  "g" '(:ignore t :which-key "Git")
	  "h" `(,(general-simulate-key "C-h") :which-key "Help")
	  "q" '(:ignore t :which-key "Quit")
	  "u" '(universal-argument :which-key "Universal Argument")
	  "w" `(,(general-simulate-key "C-w") :which-key "Window"))

	;; Define Universal Argument Map Keys
	(general-define-key :keymaps 'universal-argument-map
			    (concat utz/leader-key " u") 'universal-argument-more))
    #+END_SRC

*** Evil
  
    #+BEGIN_SRC emacs-lisp
      (use-package evil
	:straight t
	:demand t
	:init
	(setq evil-split-window-below t)
	(setq evil-vsplit-window-right t)
	(setq evil-want-C-u-scroll t)
	(setq evil-want-C-u-delete t)
	(setq evil-want-C-w-in-emacs-state t)
	(setq evil-shift-width 2)
	:config
	(evil-set-initial-state 'helpful-mode 'motion)
	(evil-mode 1))
    #+END_SRC

**** Evil Surround

     #+BEGIN_SRC emacs-lisp
       (use-package evil-surround
	 :straight t
	 :after evil
	 :config
	 (global-evil-surround-mode 1))
     #+END_SRC


*** Flycheck

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
	:straight t
	:functions global-flycheck-mode
	:init
	(setq flycheck-emacs-lisp-load-path 'inherit)
	:config
	(global-flycheck-mode))
    #+END_SRC

*** Company

    #+BEGIN_SRC emacs-lisp
      (use-package company
	:straight t
	:hook (after-init . global-company-mode)
	:general
	("C-SPC" '(company-complete :which-key "Company Complete")))
    #+END_SRC

*** Which Key

    #+BEGIN_SRC emacs-lisp
      (use-package which-key
	:straight t
	:demand t
	:functions which-key-mode
	:general
	(:infix "C-h"
		"K" '(which-key-show-top-level :which-key "Which Key Show Top Level")
		"M" '(which-key-show-major-mode :which-key "Which Key Show Major Mode"))
	:config
	(setq which-key-idle-delay 0.3)
	(setq which-key-max-description-length 40)
	(setq which-key-add-column-padding 1)
	(which-key-mode))
    #+END_SRC

*** Restart Emacs

    #+BEGIN_SRC emacs-lisp
      (use-package restart-emacs
	:straight t
	:general
	(utz/set-leader-key :infix "q"
	  "r" '(utz/reload-configuration :which-key "Reload Configuration")
	  "R" '(restart-emacs :which-key "Restart Emacs")))
    #+END_SRC

*** Magit

    #+BEGIN_SRC emacs-lisp
      (use-package magit
	:straight t
	:general
	(utz/set-leader-key :infix "g"
	  "SPC" '(magit-status :which-key "Magit Status")
	  "RET" '(magit-dispatch :which-key "Magit Dispatch")
	  "s" '(magit-stage-file :which-key "Magit Stage File")))
    #+END_SRC

**** Evil Magit

     #+BEGIN_SRC emacs-lisp
       (use-package evil-magit
	 :straight t
	 :after (evil magit))
     #+END_SRC

*** Org

    #+BEGIN_SRC emacs-lisp
      (use-package org
	:straight t
	:init
	(setq org-confirm-babel-evaluate nil))
    #+END_SRC

*** Helpful

    #+BEGIN_SRC emacs-lisp
      (use-package helpful
	:straight t
	:general
	(:infix "C-h"
		"SPC" '(helpful-at-point :which-key "Helpful At Point")
		"C" '(helpful-command :which-key "Helpful Command")
		"F" '(helpful-function :which-key "Helpful Function")
		"f" '(helpful-callable :which-key "Helpful Callable")
		"k" '(helpful-key :which-key "Helpful Key")
		"v" '(helpful-variable :which-key "Helpful Variable")
		"?" '(:ignore t :which-key "Emacs..."))
	(:prefix "C-h ?"
		 "m" '(emacs-index-search :which-key "Search Emacs Manual")
		 "l" '(elisp-index-search :which-key "Search Elisp Manual"))
	(:keymaps 'helpful-mode-map
		  "q" '(kill-buffer-and-window :which-key "Close Help")))
    #+END_SRC

*** Doom Themes

    #+BEGIN_SRC emacs-lisp
      (use-package doom-themes
	:straight t
	:config
	(setq doom-themes-enable-bold t
	      doom-themes-enable-italic t)
	(load-theme 'doom-outrun-electric t)

	(doom-themes-visual-bell-config)
	;;(doom-themes-neotree-config)
	;;(setq doom-themes-treemacs-theme "doom-colors")
	;;(doom-themes-treemacs-config)
	(doom-themes-org-config))
    #+END_SRC

*** YASnippet

    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
	:straight t
	:config
	(yas-global-mode 1))
    #+END_SRC

*** WS Butler

    #+BEGIN_SRC emacs-lisp
      (use-package ws-butler
	:straight t
	:hook prog-mode)
    #+END_SRC

* Footnotes

  # Local Variables:
  # eval: (add-to-list 'org-babel-default-header-args:emacs-lisp '(:results . "none"))
  # End:
